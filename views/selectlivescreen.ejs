<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Document</title>
  <link rel="stylesheet" href="/css/groupScreen.css" />
  <link rel="icon" type="image/png" href="https://res.cloudinary.com/dqfnwh89v/image/upload/v1724408615/qxvvfcf7ftgklhl2k03v.png">

    <link rel="stylesheet" href="/css/font.css" />

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> <!-- SweetAlert2 Library -->
  <style>
    .goback {
      padding: 12px 20px;
      border: 1px solid #0D6EFD;
      font-weight: 700;
      color: #0D6EFD;
      background: transparent;
    }
    .goback:hover{
      color: white;
    }
    .header {
      display: flex;
      justify-content: flex-end;
    }
    .filter{
      width: 100%;
      display: flex;
      
    }
  </style>
</head>

<body>
  <div class="group">
    <div class="header">
      <div class="group-screen-btn">
        <button class="goback" onclick="goback()">Go Back</button>
        <button onclick="publishPlaylist()">Publish</button>
      </div>
    </div>
    <div class="heading">
      <h3>Select Screens to Publish Live Content</h3>
    </div>
    <div class="selection-screens">
      <div class="select-screen">
        <div class="filter">
          <select style="width: 50%; border-radius: 5px;" name="type of screen" id="typeOfScreen">
            <option value="">Type of Screen</option>
            <option value="Single">Single</option>
            <option value="Dual">Dual</option>
          </select>
          <input style="width: 50%;" type="search" id="searchInput" placeholder="Search">
        </div>
        <table>
          <thead>
            <tr>
              <th></th>
              <th>Screen ID</th>
              <th>Pairing Code</th>
              <th>SCREEN NAME</th>
              <th>type of screen</th>
            </tr>
          </thead>
          <tbody>
            <% if (screens && screens.length) { %>
              <% screens.forEach(screen => { %>
                <tr class="screen-row">
                  <td>
                    <input type="checkbox" name="checkbox" value="<%= screen.screenid %>" data-pairingcode="<%= screen.pairingcode %>" />
                  </td>
                  <td><%= screen.screenid %></td>
                  <td><%= screen.pairingcode %></td>
                  <td><%= screen.screenname %></td>
                  <td id="screen.ifsecondscreenispresentondevice">
                    <% 
                      let matchFound = false;
                      screenDeviceConfig.forEach(screenconfig => { 
                        if (screen.screenid == screenconfig.client_name) { 
                          matchFound = true;
                    %>
                          <%= screenconfig.ifsecondscreenispresentondevice === 1 ? 'Single' : (screenconfig.ifsecondscreenispresentondevice === 2 ? 'Dual' : 'Single') %>
                    <% 
                        } 
                      }); 
                      if (!matchFound) { 
                    %>
                      Single
                    <% 
                      } 
                    %>
                  </td>
                  
                  
                </tr>
              <% }) %>
            <% }  %>
          </tbody>
        </table>
         <!-- Always include this message in the DOM, hidden by default -->
  <div id="noResultsMessage" style="display: none; text-align: center;">No screens found.</div>
      </div>
    </div>
  </div>
  
  <script>
    function goback() {
      Swal.fire({
        title: 'Are you sure?',
        text: 'Are you sure you want to exit and discard changes?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, go back',
        cancelButtonText: 'Cancel'
      }).then((result) => {
        if (result.isConfirmed) {
          window.history.back();
        }
      });
    }

    async function publishPlaylist() {
      const selectedScreens = [];
      const selectedPairingCodes = [];
      const checkboxes = document.querySelectorAll('input[name="checkbox"]:checked');

      checkboxes.forEach((checkbox) => {
        selectedScreens.push(checkbox.value);
        selectedPairingCodes.push(checkbox.getAttribute('data-pairingcode'));
      });

      if (selectedScreens.length === 0) {
        Swal.fire({
          icon: 'warning',
          title: 'No Screens Selected',
          text: 'Please select at least one screen',
        });
        return;
      }

      const formData = JSON.parse(sessionStorage.getItem('formData'));
      const liveName = sessionStorage.getItem('liveName');
      const liveDescription = sessionStorage.getItem('liveDescription');

      console.log("formData", formData);
      console.log("liveName", liveName);
      console.log("liveDescription", liveDescription);
      console.log("selectedScreens", selectedScreens);
      console.log("selectedPairingCodes", selectedPairingCodes);

      if (!formData || !liveName || !liveDescription) {
        Swal.fire({
          icon: 'warning',
          title: 'Missing Data',
          text: 'Missing data. Please ensure all steps are completed.',
        });
        return;
      }

      try {
        const response = await fetch("/Dashboard/LiveContent/createlive", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            liveName: liveName,
            liveDescription: liveDescription,
            liveUrls: formData,
            screenIDs: selectedScreens,
            pairingCodes: selectedPairingCodes
          }),
        });

        if (!response.ok) {
          throw new Error("Failed to publish live content");
        }

        const responseData = await response.json();
        console.log("Publish response:", responseData);
        Swal.fire({
          icon: 'success',
          title: 'Live Content Published',
          text: 'Live content published successfully!',
        }).then(() => {
          window.location.href = '/Dashboard/LiveContent';
        });
      } catch (error) {
        console.error("Error publishing live content:", error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Failed to publish live content. Please try again.',
        });
      }
    }



//     const searchInput = document.getElementById('searchInput');
//       if (searchInput) {
//         searchInput.addEventListener('input', filterScreens);
//       }


//       function filterScreens() {
//   const filter = document.getElementById('searchInput').value.toLowerCase();
//   const rows = document.querySelectorAll('.screen-row');
//   let visibleRows = 0;

//   rows.forEach(row => {
//     // Assuming the screen name is in the fourth <td>
//     const screenName = row.querySelector('td:nth-child(4)').textContent.toLowerCase();
//     if (screenName.includes(filter)) {
//       row.style.display = '';
//       visibleRows++;
//     } else {
//       row.style.display = 'none';
//     }
//   });

//   const noResultsMessage = document.getElementById('noResultsMessage');
//   noResultsMessage.style.display = visibleRows === 0 ? '' : 'none';
// }


document.getElementById('typeOfScreen').addEventListener('change', filterScreens); // Trigger when the dropdown changes

const searchInput = document.getElementById('searchInput');
if (searchInput) {
  searchInput.addEventListener('input', filterScreens); // Trigger when search input is entered
}

function filterScreens() {
  const filter = document.getElementById('searchInput').value.toLowerCase(); // Search input value
  const rows = document.querySelectorAll('.screen-row');
  const screenTypeFilter = document.getElementById('typeOfScreen').value.toLowerCase(); // Dropdown selected value
  let visibleRows = 0;

  rows.forEach(row => {
    const screenName = row.querySelector('td:nth-child(4)').textContent.toLowerCase(); // Screen name
    const screenType = row.querySelector('td:nth-child(5)').textContent.toLowerCase(); // Screen type (Single or Dual)

    // Check if both the screen name and type match the filters
    const matchesName = screenName.includes(filter);
    const matchesType = screenType.includes(screenTypeFilter) || screenTypeFilter === "single";

    if (matchesName && (screenTypeFilter === 'single' || screenTypeFilter === 'dual' ? screenType.includes(screenTypeFilter) : true)) {
      row.style.display = ''; // Show matching rows
      visibleRows++;
    } else {
      row.style.display = 'none'; // Hide non-matching rows
    }
  });

  const noResultsMessage = document.getElementById('noResultsMessage');
  noResultsMessage.style.display = visibleRows === 0 ? '' : 'none'; // Show "No results" message if no rows are visible
}

  </script>
</body>
</html>
